package com.jacrispys.JavaBot.Utils;


import com.jacrispys.JavaBot.Utils.MySQL.MySQLConnection;
import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.entities.Activity;
import net.dv8tion.jda.api.entities.Guild;
import net.dv8tion.jda.api.entities.Member;
import net.dv8tion.jda.api.entities.TextChannel;
import net.dv8tion.jda.api.requests.RestAction;

import java.awt.*;
import java.text.SimpleDateFormat;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

public class GameSpyThread extends Thread {

    @SuppressWarnings("all")
    private final JDA jda;
    public Map<Guild, ScheduledExecutorService> runningSpies = new HashMap<>();
    private final MySQLConnection connection = MySQLConnection.getInstance();


    public GameSpyThread(JDA jda) {
        this.jda = jda;
    }

    @Override
    public void run() {
        System.out.println("Thread running!");

    }

    public void addNewSpy(Guild guild) {
        runningSpies.put(guild, runSpy(guild));
    }


    @Deprecated
    public void setSpyData(Map<Guild, ScheduledExecutorService> guildList) {
        runningSpies = guildList;
    }

    public Map<Guild, ScheduledExecutorService> getRunningSpies() {
        return runningSpies;
    }

    protected ScheduledExecutorService runSpy(Guild guild) {
       ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1);
       Runnable service = () -> {
           HashMap<Member, Activity> guildData = fetchData(guild);
           System.out.println(guildData);
       };
       executorService.scheduleAtFixedRate(service, 1, 5, TimeUnit.SECONDS);
       return executorService;

    }

    public ScheduledExecutorService getSpy(Guild guild) {
        return runningSpies.get(guild);
    }

    protected HashMap<Member, Activity> fetchData(Guild guild) {
        HashMap<Member, Activity> dataMap = new HashMap<>();
        for (Member member : guild.getMembers()) {
            for (Activity activity : member.getActivities()) {
                if (activity.getTimestamps() != null && activity.isRich()) {
                    dataMap.put(member, activity);
                }
            }
        }
        return dataMap;
    }


    public void sendUpdate(Guild guild) {

        TextChannel gameSpyChannel;
        try {
            gameSpyChannel = guild.getTextChannelById(connection.getGameSpyChannel(guild));
        } catch (Exception e) {
            System.out.println("Could not get gamespy channel for guild: " + guild.getName());
            return;
        }

        gameSpyChannel.sendMessage("Currently Crunching numbers from: " + guild.getName()).queue();

        EmbedBuilder embedBuilder = new EmbedBuilder();
        embedBuilder.setTitle("GameSpyâ„¢ Report");
        embedBuilder.setColor(new Color(0x530C84));
        SimpleDateFormat formatter = new SimpleDateFormat("EEE, MMM d, yyyy 'at' hh:mma");
        Date date = new Date();
        embedBuilder.setDescription("Generated by IAB on: " + formatter.format(date) +"\n");
        embedBuilder.setAuthor("Made & Maintained by: Jacrispys");
        embedBuilder.setImage("https://i.imgur.com/MD8RHHL.png");

        StringBuilder richValue = new StringBuilder();
        for (Member member : guild.getMembers()) {
            for (Activity activity : member.getActivities()) {
                String time;
                if (activity.getTimestamps() != null) {
                    long secs = activity.getTimestamps().getElapsedTime(ChronoUnit.SECONDS);
                    time = String.format("%02d:%02d:%02d", secs / 3600, (secs % 3600) / 60, secs % 60);
                    richValue.append("\n" + member.getAsMention() + " - " + activity.getName() + " for " + time);
                }
            }
        }

        if(richValue.toString().length() >= 1024 && richValue.toString().length() <= 2048) {
            embedBuilder.addField("*Games*", richValue.substring(0,1024), false);
            embedBuilder.addField("*Games (Cont)*", richValue.substring(1024,richValue.toString().length()), false);
        } else {
            embedBuilder.addField("*Games*", richValue.toString(), false);
        }

        gameSpyChannel.sendMessageEmbeds(embedBuilder.build()).queue();
    }
}
